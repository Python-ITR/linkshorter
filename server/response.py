from http import HTTPStatus
from typing import Union


class Response:
    def __init__(self, status: HTTPStatus = HTTPStatus.OK, headers={}, body=b""):
        self._status = status
        self._body = body  # type: Union[bytes, str]
        self._headers = headers

    @property
    def status(self):
        return self._status

    @status.setter
    def status(self, value: HTTPStatus):
        self._status = value

    @property
    def body(self):
        return self._body

    @body.setter
    def body(self, value: Union[bytes, str]):
        self._body = value
        self._updateContentLength()

    def addHeader(self, key: str, value: str):
        """ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ """
        self._headers[key] = value

    def delHeader(self, key: str):
        """ –£–¥–∞–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–≤–µ—Ç–∞ """
        self._headers.pop(key, 0)

    def _updateContentLength(self):
        """
        –ú–µ—Ç–æ–¥ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ 'Content-Length' –æ–ø—Ä–µ–¥–µ–ª—è—è –¥–ª–∏–Ω—É self._body
        """
        length = len(self._body.encode() if isinstance(self._body, str) else self._body)
        if length:
            self.addHeader(
                "Content-Length",
                str(
                    length
                ),
            )
        else:
            self.delHeader("Content-Length")

    def _getHeaders(self) -> str:
        """
        –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é:
        - —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞
        - –∑–∞–≥–æ–ª–æ–≤–∫–∏
        """
        return (
            # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            f"HTTP/1.1 {self._status} {self._status.phrase}\n"
            +
            # –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            ("\n".join([f"{key}: {value}" for key, value in self._headers.items()]))
        )

    def encode(self) -> bytes:
        """
        –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –≤ bytes
        """
        self._updateContentLength()
        http_response_bytes = bytearray(self._getHeaders(), "utf-8")  # type: bytearray
        if self._body:
            http_response_bytes.extend(b"\r\n\r\n")
            http_response_bytes += (
                #      üëá - –≤ —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ self.body ‚Äì —Å—Ç—Ä–æ–∫–∞
                self._body.encode()
                if isinstance(self._body, str)
                #      üëá - self.body ‚Äì bytes
                else self._body
            )
        return bytes(http_response_bytes)


class TextResponse(Response):
    """ –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å Content-Type 'text/plain' """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.addHeader("Content-Type", "text/plain; charset=UTF-8")


class HtmlResponse(Response):
    """ –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å Content-Type 'text/html' """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.addHeader("Content-Type", "text/html; charset=UTF-8")


class JsonResponse(Response):
    """ –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å Content-Type 'application/json' """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.addHeader("Content-Type", "application/json; charset=UTF-8")


class RedirectResponse(Response):
    """ –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å Location"""

    def __init__(self, location: str, *args, **kwargs):
        super().__init__(HTTPStatus.TEMPORARY_REDIRECT, *args, **kwargs)
        self.body = " "
        self.addHeader("Location", location)
